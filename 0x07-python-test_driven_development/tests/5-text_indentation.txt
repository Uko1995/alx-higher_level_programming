'Test for 5-text_indentation le'
>>> text_indentation = __import__('5-text_indentation').text_indentation

'text is a string'
>>> text_indentation("Walter: White? Meco.")
Walter:
<BLANKLINE>
White?
<BLANKLINE>
Meco.
<BLANKLINE>

'text is a string with severals blankspaces'
>>> text_indentation("Walter:		White?            Meco.")
Walter:
<BLANKLINE>
White?
<BLANKLINE>
Meco.
<BLANKLINE>

'text with .:? without space'
>>> text_indentation(".:?")
.
<BLANKLINE>
:
<BLANKLINE>
?
<BLANKLINE>

'text is an integer'
>>> text_indentation(1)
Traceback (most recent call last):
...
TypeError: text must be a string

'text is a float'
>>> text_indentation(2.8)
Traceback (most recent call last):
...
TypeError: text must be a string

'text is bool'
>>> text_indentation(False)
Traceback (most recent call last):
...
TypeError: text must be a string

'text is tuple'
>>> text_indentation((2, 8))
Traceback (most recent call last):
...
TypeError: text must be a string

'text is list'
>>> text_indentation([2, 8])
Traceback (most recent call last):
...
TypeError: text must be a string

'text is dict'
>>> text_indentation({2, 8})
Traceback (most recent call last):
...
TypeError: text must be a string

'text is empty'
>>> text_indentation()
Traceback (most recent call last):
...
TypeError: text_indentation() missing 1 required positional argument: 'text'
